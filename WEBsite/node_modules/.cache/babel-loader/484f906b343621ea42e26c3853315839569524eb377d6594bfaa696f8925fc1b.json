{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ozlev\\\\Desktop\\\\MCP\\\\whatsappweb mcp\\\\WEBsite\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Sidebar from './components/Sidebar';\nimport ChatWindow from './components/ChatWindow';\nimport QRCodeWindow from './components/QRCodeWindow';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedChat, setSelectedChat] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('checking');\n  const [language, setLanguage] = useState('en');\n\n  // Check WhatsApp connection status\n  useEffect(() => {\n    const checkConnection = async () => {\n      try {\n        const response = await axios.get('/whatsapp/status');\n        setIsConnected(response.data.connected);\n        setConnectionStatus(response.data.connected ? 'connected' : 'disconnected');\n      } catch (error) {\n        console.error('Error checking connection:', error);\n        setIsConnected(false);\n        setConnectionStatus('error');\n      }\n    };\n    checkConnection();\n\n    // Check connection status every 5 seconds\n    const interval = setInterval(checkConnection, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleChatSelect = chat => {\n    setSelectedChat(chat);\n  };\n  const toggleLanguage = () => {\n    setLanguage(prev => prev === 'en' ? 'he' : 'en');\n  };\n  if (!isConnected && connectionStatus !== 'checking') {\n    return /*#__PURE__*/_jsxDEV(QRCodeWindow, {\n      language: language,\n      toggleLanguage: toggleLanguage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${language === 'he' ? 'rtl' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        onChatSelect: handleChatSelect,\n        selectedChat: selectedChat,\n        language: language,\n        toggleLanguage: toggleLanguage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n        selectedChat: selectedChat,\n        language: language\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5bAY9Izhqr0Gt0YVpNcWGfN2EpY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Sidebar","ChatWindow","QRCodeWindow","jsxDEV","_jsxDEV","App","_s","selectedChat","setSelectedChat","isConnected","setIsConnected","connectionStatus","setConnectionStatus","language","setLanguage","checkConnection","response","get","data","connected","error","console","interval","setInterval","clearInterval","handleChatSelect","chat","toggleLanguage","prev","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onChatSelect","_c","$RefreshReg$"],"sources":["C:/Users/ozlev/Desktop/MCP/whatsappweb mcp/WEBsite/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Sidebar from './components/Sidebar';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport QRCodeWindow from './components/QRCodeWindow';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [selectedChat, setSelectedChat] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [connectionStatus, setConnectionStatus] = useState('checking');\r\n  const [language, setLanguage] = useState('en');\r\n\r\n  // Check WhatsApp connection status\r\n  useEffect(() => {\r\n    const checkConnection = async () => {\r\n      try {\r\n        const response = await axios.get('/whatsapp/status');\r\n        setIsConnected(response.data.connected);\r\n        setConnectionStatus(response.data.connected ? 'connected' : 'disconnected');\r\n      } catch (error) {\r\n        console.error('Error checking connection:', error);\r\n        setIsConnected(false);\r\n        setConnectionStatus('error');\r\n      }\r\n    };\r\n\r\n    checkConnection();\r\n    \r\n    // Check connection status every 5 seconds\r\n    const interval = setInterval(checkConnection, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleChatSelect = (chat) => {\r\n    setSelectedChat(chat);\r\n  };\r\n\r\n  const toggleLanguage = () => {\r\n    setLanguage(prev => prev === 'en' ? 'he' : 'en');\r\n  };\r\n\r\n  if (!isConnected && connectionStatus !== 'checking') {\r\n    return <QRCodeWindow language={language} toggleLanguage={toggleLanguage} />;\r\n  }\r\n\r\n  return (\r\n    <div className={`app ${language === 'he' ? 'rtl' : ''}`}>\r\n      <div className=\"app-container\">\r\n        <Sidebar \r\n          onChatSelect={handleChatSelect}\r\n          selectedChat={selectedChat}\r\n          language={language}\r\n          toggleLanguage={toggleLanguage}\r\n        />\r\n        <ChatWindow \r\n          selectedChat={selectedChat}\r\n          language={language}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}